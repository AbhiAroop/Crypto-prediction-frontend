{"version":3,"sources":["components/CryptoSelector.jsx","components/PredictionChart.jsx","components/LoadingSpinner.jsx","App.jsx","services/api.js","index.jsx"],"names":["CryptoSelector","_ref","cryptocurrencies","onSelect","selectedValue","_jsxs","className","children","_jsx","htmlFor","id","onChange","e","selectedCoin","target","value","map","crypto","name","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","PredictionChart","predictions","Array","isArray","length","data","labels","_","index","datasets","label","fill","borderColor","backgroundColor","tension","Line","options","responsive","maintainAspectRatio","plugins","legend","position","title","display","text","scales","y","beginAtZero","ticks","callback","toLocaleString","reduce","a","b","minimumFractionDigits","maximumFractionDigits","LoadingSpinner","App","selectedCrypto","setSelectedCrypto","useState","days","setDays","prediction","setPrediction","loading","setLoading","error","setError","useEffect","console","log","type","min","max","Number","parseInt","onBlur","onClick","async","result","coin","response","fetch","method","headers","body","JSON","stringify","json","ok","Error","fetchPrediction","err","disabled","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02eea3f7.chunk.js","sourcesContent":["import React from 'react';\n\nconst CryptoSelector = ({ cryptocurrencies, onSelect, selectedValue }) => {\n    const handleChange = (e) => {\n        const selectedCoin = e.target.value;\n        onSelect(selectedCoin);\n    };\n\n    return (\n        <div className=\"crypto-selector\">\n            <label htmlFor=\"crypto-select\">Cryptocurrency</label>\n            <select \n                id=\"crypto-select\" \n                onChange={handleChange}\n                value={selectedValue}\n                className=\"styled-select\"\n            >\n                <option value=\"\">Select a cryptocurrency</option>\n                {cryptocurrencies.map((crypto) => (\n                    <option key={crypto.id} value={crypto.id}>\n                        {crypto.name}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport default CryptoSelector;","import React from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst PredictionChart = ({ predictions }) => {\n    if (!predictions || !Array.isArray(predictions) || predictions.length === 0) {\n        return <div>No prediction data available</div>;\n    }\n\n    const data = {\n        labels: predictions.map((_, index) => `Day ${index + 1}`),\n        datasets: [\n            {\n                label: 'Price Prediction (USD)',\n                data: predictions,\n                fill: false,\n                borderColor: 'rgb(75, 192, 192)',\n                backgroundColor: 'rgba(75, 192, 192, 0.5)',\n                tension: 0.1\n            }\n        ]\n    };\n\n    const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n            legend: {\n                position: 'top',\n            },\n            title: {\n                display: true,\n                text: 'Cryptocurrency Price Prediction'\n            },\n        },\n        scales: {\n            y: {\n                beginAtZero: false,\n                ticks: {\n                    callback: (value) => `$${value.toLocaleString()}`\n                }\n            }\n        }\n    };\n\n    return (\n        <div className=\"predictions-container\">\n            <div className=\"chart-container\">\n                <Line data={data} options={options} />\n            </div>\n            <div className=\"prediction-summary\">\n                <p>Total predictions: {predictions.length}</p>\n                <p>Average predicted value: ${(predictions.reduce((a, b) => a + b, 0) / predictions.length)\n                    .toLocaleString('en-US', {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2\n                    })}\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default PredictionChart;","import React from 'react';\n\nconst LoadingSpinner = () => {\n    return (\n        <div className=\"loading-spinner\">\n            <div className=\"spinner\"></div>\n            <p>Loading...</p>\n        </div>\n    );\n};\n\nexport default LoadingSpinner;","import React, { useState, useEffect } from 'react';\nimport CryptoSelector from './components/CryptoSelector';\nimport PredictionChart from './components/PredictionChart';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport { fetchPrediction } from './services/api';\nimport './styles.css'; \n\nconst App = () => {\n    const [selectedCrypto, setSelectedCrypto] = useState('');\n    const [days, setDays] = useState(1);\n    const [prediction, setPrediction] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    // Add effect to monitor prediction changes\n    useEffect(() => {\n        if (prediction) {\n            console.log('Prediction updated:', prediction);\n        }\n    }, [prediction]);\n\n    const handleCryptoChange = (value) => {\n        setSelectedCrypto(value);\n        setPrediction(null); // Reset prediction when crypto changes\n        setError(''); // Clear any previous errors\n    };\n\n    const handleCalculate = async () => {\n        setLoading(true);\n        setError('');\n        setPrediction(null); // Reset prediction before new request\n        \n        try {\n            const result = await fetchPrediction(selectedCrypto, days);\n            console.log('Received prediction data:', result);\n            \n            if (result && Array.isArray(result) && result.length > 0) {\n                setPrediction(result);\n                // Don't try to log prediction here as it won't be updated yet\n                console.log('Prediction data received:', result);\n            } else {\n                setError('Invalid prediction data received');\n            }\n        } catch (err) {\n            console.error('Prediction error:', err);\n            setError('Failed to fetch prediction. Please try again.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleDaysChange = (e) => {\n        const value = e.target.value;\n        // Updated validation for up to 100 days\n        if (value === '' || (Number(value) >= 1 && Number(value) <= 100)) {\n            setDays(value === '' ? '' : parseInt(value));\n        }\n    };\n\n    const cryptocurrencies = [\n        { id: 'bitcoin', name: 'Bitcoin' },\n        { id: 'ethereum', name: 'Ethereum' },\n        { id: 'dogecoin', name: 'Dogecoin' },\n        { id: 'cardano', name: 'Cardano' },\n        { id: 'solana', name: 'Solana' },\n        { id: 'ripple', name: 'XRP' },\n        { id: 'polkadot', name: 'Polkadot' },\n        { id: 'binancecoin', name: 'Binance Coin' },\n        { id: 'polygon', name: 'Polygon' },\n        { id: 'avalanche-2', name: 'Avalanche' },\n        { id: 'chainlink', name: 'Chainlink' },\n        { id: 'uniswap', name: 'Uniswap' },\n        { id: 'litecoin', name: 'Litecoin' },\n        { id: 'stellar', name: 'Stellar' },\n        { id: 'cosmos', name: 'Cosmos' },\n        { id: 'monero', name: 'Monero' },\n        { id: 'algorand', name: 'Algorand' },\n        { id: 'tron', name: 'TRON' },\n        { id: 'near', name: 'NEAR Protocol' },\n        { id: 'vechain', name: 'VeChain' }\n    ];\n\n    return (\n        <div>\n            <h1>Crypto Prediction Tool</h1>\n            <div className=\"controls\">\n                <CryptoSelector \n                    cryptocurrencies={cryptocurrencies} \n                    onSelect={handleCryptoChange}\n                    selectedValue={selectedCrypto}\n                />\n                <div className=\"days-selector\">\n                    <label htmlFor=\"days-select\">Prediction Days (1-100):</label>\n                    <input\n                        id=\"days-select\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"100\"\n                        value={days}\n                        onChange={handleDaysChange}\n                        onBlur={() => {\n                            if (days === '' || days < 1) setDays(1);\n                            if (days > 100) setDays(100);\n                        }}\n                    />\n                </div>\n                <button \n                    onClick={handleCalculate}\n                    disabled={!selectedCrypto || !days || days < 1 || days > 100}>\n                    Calculate\n                </button>\n            </div>\n            {loading && <LoadingSpinner />}\n            {error && <p className=\"error-message\">{error}</p>}\n            {prediction && <PredictionChart predictions={prediction} />}\n        </div>\n    );\n};\n\nexport default App;","const API_URL = 'http://localhost:5000';\n\nexport const fetchPrediction = async (coin, days) => {\n    try {\n        console.log(`Fetching prediction for ${coin} (${days} days)`);\n        \n        // Make a new prediction request directly\n        const response = await fetch(`${API_URL}/predict`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ coin, days }),\n        });\n\n        const data = await response.json();\n        console.log('Received prediction data:', data);\n        console.log('Received prediction data 2:', data.predictions);\n        \n        if (!response.ok) {\n            throw new Error(data.error || 'Failed to fetch prediction');\n        }\n\n        if (!data.predictions || !Array.isArray(data.predictions)) {\n            throw new Error('Invalid prediction data received');\n        }\n        console.log('HURRAY', data.predictions);\n\n        return data.predictions;\n    } catch (error) {\n        console.error('Error fetching prediction:', error);\n        throw error;\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}